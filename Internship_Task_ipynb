{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1cW_ExpfeDY5sgAMuDFo1K54O6gD3k9mg",
      "authorship_tag": "ABX9TyM7/9Wv3+A2GaCWNkb/bn4A",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jeevikavishwakarma/PRODIGY_DS_01/blob/main/Internship_Task_ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Task - 01\n",
        "\n",
        "Create a bar chart or histogram to visualize the distribution of a categorical or continuous variable, such as the distribution of ages or genders in a population.\n",
        "\n",
        "[Dataset](https://data.worldbank.org/indicator/SP.POP.TOTL)"
      ],
      "metadata": {
        "id": "WOCzNdynYykn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Categorical data\n",
        "import pandas as pd\n",
        "df1  = pd.read_csv(\"Metadata_country.csv\")\n",
        "df1"
      ],
      "metadata": {
        "id": "Rs2zxXScZCD9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "19bf9fc8-bdc0-4be8-cdad-436a04d07c23"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Country Code                      Region          IncomeGroup  \\\n",
              "0            ABW   Latin America & Caribbean          High income   \n",
              "1            AFE                         NaN                  NaN   \n",
              "2            AFG                  South Asia           Low income   \n",
              "3            AFW                         NaN                  NaN   \n",
              "4            AGO          Sub-Saharan Africa  Lower middle income   \n",
              "..           ...                         ...                  ...   \n",
              "260          XKX       Europe & Central Asia  Upper middle income   \n",
              "261          YEM  Middle East & North Africa           Low income   \n",
              "262          ZAF          Sub-Saharan Africa  Upper middle income   \n",
              "263          ZMB          Sub-Saharan Africa  Lower middle income   \n",
              "264          ZWE          Sub-Saharan Africa  Lower middle income   \n",
              "\n",
              "                                          SpecialNotes  \\\n",
              "0                                                  NaN   \n",
              "1    26 countries, stretching from the Red Sea in t...   \n",
              "2    The reporting period for national accounts dat...   \n",
              "3    22 countries, stretching from the westernmost ...   \n",
              "4    The World Bank systematically assesses the app...   \n",
              "..                                                 ...   \n",
              "260                                                NaN   \n",
              "261  The World Bank systematically assesses the app...   \n",
              "262  Fiscal year end: March 31; reporting period fo...   \n",
              "263  National accounts data were rebased to reflect...   \n",
              "264  National Accounts data are reported in Zimbabw...   \n",
              "\n",
              "                       TableName  Unnamed: 5  \n",
              "0                          Aruba         NaN  \n",
              "1    Africa Eastern and Southern         NaN  \n",
              "2                    Afghanistan         NaN  \n",
              "3     Africa Western and Central         NaN  \n",
              "4                         Angola         NaN  \n",
              "..                           ...         ...  \n",
              "260                       Kosovo         NaN  \n",
              "261                  Yemen, Rep.         NaN  \n",
              "262                 South Africa         NaN  \n",
              "263                       Zambia         NaN  \n",
              "264                     Zimbabwe         NaN  \n",
              "\n",
              "[265 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3bfaa2d9-a749-48be-a312-7f3c7a1a3e74\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country Code</th>\n",
              "      <th>Region</th>\n",
              "      <th>IncomeGroup</th>\n",
              "      <th>SpecialNotes</th>\n",
              "      <th>TableName</th>\n",
              "      <th>Unnamed: 5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ABW</td>\n",
              "      <td>Latin America &amp; Caribbean</td>\n",
              "      <td>High income</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Aruba</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AFE</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>26 countries, stretching from the Red Sea in t...</td>\n",
              "      <td>Africa Eastern and Southern</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AFG</td>\n",
              "      <td>South Asia</td>\n",
              "      <td>Low income</td>\n",
              "      <td>The reporting period for national accounts dat...</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AFW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>22 countries, stretching from the westernmost ...</td>\n",
              "      <td>Africa Western and Central</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AGO</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>Lower middle income</td>\n",
              "      <td>The World Bank systematically assesses the app...</td>\n",
              "      <td>Angola</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>260</th>\n",
              "      <td>XKX</td>\n",
              "      <td>Europe &amp; Central Asia</td>\n",
              "      <td>Upper middle income</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Kosovo</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>261</th>\n",
              "      <td>YEM</td>\n",
              "      <td>Middle East &amp; North Africa</td>\n",
              "      <td>Low income</td>\n",
              "      <td>The World Bank systematically assesses the app...</td>\n",
              "      <td>Yemen, Rep.</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>262</th>\n",
              "      <td>ZAF</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>Upper middle income</td>\n",
              "      <td>Fiscal year end: March 31; reporting period fo...</td>\n",
              "      <td>South Africa</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>263</th>\n",
              "      <td>ZMB</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>Lower middle income</td>\n",
              "      <td>National accounts data were rebased to reflect...</td>\n",
              "      <td>Zambia</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>264</th>\n",
              "      <td>ZWE</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>Lower middle income</td>\n",
              "      <td>National Accounts data are reported in Zimbabw...</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>265 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3bfaa2d9-a749-48be-a312-7f3c7a1a3e74')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3bfaa2d9-a749-48be-a312-7f3c7a1a3e74 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3bfaa2d9-a749-48be-a312-7f3c7a1a3e74');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-eb17a417-f7c6-4c72-915d-f978154775bf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eb17a417-f7c6-4c72-915d-f978154775bf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-eb17a417-f7c6-4c72-915d-f978154775bf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d02948cc-9bc3-4168-ad17-3237aaee3ba3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df1')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d02948cc-9bc3-4168-ad17-3237aaee3ba3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df1');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df1",
              "summary": "{\n  \"name\": \"df1\",\n  \"rows\": 265,\n  \"fields\": [\n    {\n      \"column\": \"Country Code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 265,\n        \"samples\": [\n          \"NZL\",\n          \"ITA\",\n          \"HKG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Latin America & Caribbean\",\n          \"South Asia\",\n          \"East Asia & Pacific\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IncomeGroup\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Low income\",\n          \"Upper middle income\",\n          \"High income\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SpecialNotes\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 113,\n        \"samples\": [\n          \"The reporting period for national accounts data is designated as either calendar year basis (CY) or fiscal year basis (FY). For this country, it is fiscal year-based (fiscal year-end: July 14). Also, an estimate (PA.NUS.ATLS) of the exchange rate covers the same period and thus differs from the official exchange rate (CY).\",\n          \"Arab World aggregate. Arab World is composed of members of the League of Arab States.\",\n          \"The Heavily Indebted Poor Countries (HIPC) refer to countries that participated in the HIPC Initiative, launched in 1996 by the IMF and World Bank to reduce external debt burdens of the most heavily indebted poor countries at that time to sustainable levels. To date, the majority of the countries completed the program, receiving 76 billion in debt-service relief over time. For more details, visit https://www.imf.org/en/About/Factsheets/Sheets/2016/08/01/16/11/Debt-Relief-Under-the-Heavily-Indebted-Poor-Countries-Initiative.\\nData are aggregates for HIPC.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TableName\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 265,\n        \"samples\": [\n          \"New Zealand\",\n          \"Italy\",\n          \"Hong Kong SAR, China\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unnamed: 5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1 = df1.drop(['Unnamed: 5', 'SpecialNotes'], axis = 1)\n",
        "df1.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 207
        },
        "id": "BCMtIAMNavih",
        "outputId": "7c9ebee5-a0e2-473c-e573-2c1763152baa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Country Code                     Region          IncomeGroup  \\\n",
              "0          ABW  Latin America & Caribbean          High income   \n",
              "1          AFE                        NaN                  NaN   \n",
              "2          AFG                 South Asia           Low income   \n",
              "3          AFW                        NaN                  NaN   \n",
              "4          AGO         Sub-Saharan Africa  Lower middle income   \n",
              "\n",
              "                     TableName  \n",
              "0                        Aruba  \n",
              "1  Africa Eastern and Southern  \n",
              "2                  Afghanistan  \n",
              "3   Africa Western and Central  \n",
              "4                       Angola  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-73265e5e-2688-4f33-b578-2abf5f8d26fc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country Code</th>\n",
              "      <th>Region</th>\n",
              "      <th>IncomeGroup</th>\n",
              "      <th>TableName</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ABW</td>\n",
              "      <td>Latin America &amp; Caribbean</td>\n",
              "      <td>High income</td>\n",
              "      <td>Aruba</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AFE</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Africa Eastern and Southern</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AFG</td>\n",
              "      <td>South Asia</td>\n",
              "      <td>Low income</td>\n",
              "      <td>Afghanistan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AFW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Africa Western and Central</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AGO</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>Lower middle income</td>\n",
              "      <td>Angola</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-73265e5e-2688-4f33-b578-2abf5f8d26fc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-73265e5e-2688-4f33-b578-2abf5f8d26fc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-73265e5e-2688-4f33-b578-2abf5f8d26fc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-87ea279a-aa2a-4afe-a2a0-d5ff2568e4db\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-87ea279a-aa2a-4afe-a2a0-d5ff2568e4db')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-87ea279a-aa2a-4afe-a2a0-d5ff2568e4db button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df1",
              "summary": "{\n  \"name\": \"df1\",\n  \"rows\": 265,\n  \"fields\": [\n    {\n      \"column\": \"Country Code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 265,\n        \"samples\": [\n          \"NZL\",\n          \"ITA\",\n          \"HKG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Latin America & Caribbean\",\n          \"South Asia\",\n          \"East Asia & Pacific\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IncomeGroup\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Low income\",\n          \"Upper middle income\",\n          \"High income\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TableName\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 265,\n        \"samples\": [\n          \"New Zealand\",\n          \"Italy\",\n          \"Hong Kong SAR, China\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "sns.set_style('darkgrid')"
      ],
      "metadata": {
        "id": "J0i03T6GfcMg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df1.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_coK7xHf4VE4",
        "outputId": "04e27d6c-d464-4e89-841b-ea2b4e76d9c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Country Code', 'Region', 'IncomeGroup', 'TableName'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Grouping data\n",
        "Region_size = df1.groupby('Region').size().reset_index(name = 'count')\n",
        "IncomeGroup_size= df1.groupby(\"IncomeGroup\").size().reset_index(name = 'income')\n",
        "x = df1.groupby(\"IncomeGroup\")\n",
        "i1 = df1.groupby('IncomeGroup').size()"
      ],
      "metadata": {
        "id": "uIPhHClAlxPL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Bargraph\n",
        "sns.barplot(x = \"IncomeGroup\", y = \"income\",hue = \"IncomeGroup\", data = IncomeGroup_size, legend = False, palette=\"deep\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.title(\"Income Range\")\n",
        "plt.ylabel(\"No. of Regions\")\n",
        "plt.xlabel(\"Income\")"
      ],
      "metadata": {
        "id": "gmRDLmxjoqam",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        },
        "outputId": "d8382be3-f0e5-4749-b1b7-b75119c81e57"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'Income')"
            ]
          },
          "metadata": {},
          "execution_count": 108
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = df1.groupby(\"Region\")\n",
        "sns.barplot(x = \"Region\", y = \"count\",hue = \"Region\", data = Region_size, legend = False, palette=\"pastel\")\n",
        "plt.tight_layout()\n",
        "plt.xticks(rotation=90)\n",
        "plt.title(\"Number of Countries in Each Region\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699
        },
        "id": "VFlS0XqXBewb",
        "outputId": "5d3b9465-9337-402c-b9ec-a4bc1eee5ea5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Number of Countries in Each Region')"
            ]
          },
          "metadata": {},
          "execution_count": 109
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Continuous Data\n",
        "df2 = pd.read_csv(\"File.csv\")\n",
        "df2.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "9WnYKJkqhjbk",
        "outputId": "473a9e8e-0269-4f9b-8ce8-1b9a6a478554"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Country Name Country Code     Indicator Name Indicator Code  \\\n",
              "0                        Aruba          ABW  Population, total    SP.POP.TOTL   \n",
              "1  Africa Eastern and Southern          AFE  Population, total    SP.POP.TOTL   \n",
              "2                  Afghanistan          AFG  Population, total    SP.POP.TOTL   \n",
              "3   Africa Western and Central          AFW  Population, total    SP.POP.TOTL   \n",
              "4                       Angola          AGO  Population, total    SP.POP.TOTL   \n",
              "\n",
              "          1960         1961         1962         1963         1964  \\\n",
              "0      54922.0      55578.0      56320.0      57002.0      57619.0   \n",
              "1  130072080.0  133534923.0  137171659.0  140945536.0  144904094.0   \n",
              "2    9035043.0    9214083.0    9404406.0    9604487.0    9814318.0   \n",
              "3   97630925.0   99706674.0  101854756.0  104089175.0  106388440.0   \n",
              "4    5231654.0    5301583.0    5354310.0    5408320.0    5464187.0   \n",
              "\n",
              "          1965  ...         2014         2015         2016         2017  \\\n",
              "0      58190.0  ...     106807.0     107906.0     108727.0     108735.0   \n",
              "1  149033472.0  ...  590968990.0  607123269.0  623369401.0  640058741.0   \n",
              "2   10036008.0  ...   32792523.0   33831764.0   34700612.0   35688935.0   \n",
              "3  108772632.0  ...  406992047.0  418127845.0  429454743.0  440882906.0   \n",
              "4    5521981.0  ...   27160769.0   28157798.0   29183070.0   30234839.0   \n",
              "\n",
              "          2018         2019         2020         2021         2022  \\\n",
              "0     108908.0     109203.0     108587.0     107700.0     107310.0   \n",
              "1  657801085.0  675950189.0  694446100.0  713090928.0  731821393.0   \n",
              "2   36743039.0   37856121.0   39068979.0   40000412.0   40578842.0   \n",
              "3  452195915.0  463365429.0  474569351.0  485920997.0  497387180.0   \n",
              "4   31297155.0   32375632.0   33451132.0   34532429.0   35635029.0   \n",
              "\n",
              "          2023  \n",
              "0     107359.0  \n",
              "1  750503764.0  \n",
              "2   41454761.0  \n",
              "3  509398589.0  \n",
              "4   36749906.0  \n",
              "\n",
              "[5 rows x 68 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5c91ff1f-1069-4529-89c1-239d03c46654\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country Name</th>\n",
              "      <th>Country Code</th>\n",
              "      <th>Indicator Name</th>\n",
              "      <th>Indicator Code</th>\n",
              "      <th>1960</th>\n",
              "      <th>1961</th>\n",
              "      <th>1962</th>\n",
              "      <th>1963</th>\n",
              "      <th>1964</th>\n",
              "      <th>1965</th>\n",
              "      <th>...</th>\n",
              "      <th>2014</th>\n",
              "      <th>2015</th>\n",
              "      <th>2016</th>\n",
              "      <th>2017</th>\n",
              "      <th>2018</th>\n",
              "      <th>2019</th>\n",
              "      <th>2020</th>\n",
              "      <th>2021</th>\n",
              "      <th>2022</th>\n",
              "      <th>2023</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Aruba</td>\n",
              "      <td>ABW</td>\n",
              "      <td>Population, total</td>\n",
              "      <td>SP.POP.TOTL</td>\n",
              "      <td>54922.0</td>\n",
              "      <td>55578.0</td>\n",
              "      <td>56320.0</td>\n",
              "      <td>57002.0</td>\n",
              "      <td>57619.0</td>\n",
              "      <td>58190.0</td>\n",
              "      <td>...</td>\n",
              "      <td>106807.0</td>\n",
              "      <td>107906.0</td>\n",
              "      <td>108727.0</td>\n",
              "      <td>108735.0</td>\n",
              "      <td>108908.0</td>\n",
              "      <td>109203.0</td>\n",
              "      <td>108587.0</td>\n",
              "      <td>107700.0</td>\n",
              "      <td>107310.0</td>\n",
              "      <td>107359.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Africa Eastern and Southern</td>\n",
              "      <td>AFE</td>\n",
              "      <td>Population, total</td>\n",
              "      <td>SP.POP.TOTL</td>\n",
              "      <td>130072080.0</td>\n",
              "      <td>133534923.0</td>\n",
              "      <td>137171659.0</td>\n",
              "      <td>140945536.0</td>\n",
              "      <td>144904094.0</td>\n",
              "      <td>149033472.0</td>\n",
              "      <td>...</td>\n",
              "      <td>590968990.0</td>\n",
              "      <td>607123269.0</td>\n",
              "      <td>623369401.0</td>\n",
              "      <td>640058741.0</td>\n",
              "      <td>657801085.0</td>\n",
              "      <td>675950189.0</td>\n",
              "      <td>694446100.0</td>\n",
              "      <td>713090928.0</td>\n",
              "      <td>731821393.0</td>\n",
              "      <td>750503764.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>Population, total</td>\n",
              "      <td>SP.POP.TOTL</td>\n",
              "      <td>9035043.0</td>\n",
              "      <td>9214083.0</td>\n",
              "      <td>9404406.0</td>\n",
              "      <td>9604487.0</td>\n",
              "      <td>9814318.0</td>\n",
              "      <td>10036008.0</td>\n",
              "      <td>...</td>\n",
              "      <td>32792523.0</td>\n",
              "      <td>33831764.0</td>\n",
              "      <td>34700612.0</td>\n",
              "      <td>35688935.0</td>\n",
              "      <td>36743039.0</td>\n",
              "      <td>37856121.0</td>\n",
              "      <td>39068979.0</td>\n",
              "      <td>40000412.0</td>\n",
              "      <td>40578842.0</td>\n",
              "      <td>41454761.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Africa Western and Central</td>\n",
              "      <td>AFW</td>\n",
              "      <td>Population, total</td>\n",
              "      <td>SP.POP.TOTL</td>\n",
              "      <td>97630925.0</td>\n",
              "      <td>99706674.0</td>\n",
              "      <td>101854756.0</td>\n",
              "      <td>104089175.0</td>\n",
              "      <td>106388440.0</td>\n",
              "      <td>108772632.0</td>\n",
              "      <td>...</td>\n",
              "      <td>406992047.0</td>\n",
              "      <td>418127845.0</td>\n",
              "      <td>429454743.0</td>\n",
              "      <td>440882906.0</td>\n",
              "      <td>452195915.0</td>\n",
              "      <td>463365429.0</td>\n",
              "      <td>474569351.0</td>\n",
              "      <td>485920997.0</td>\n",
              "      <td>497387180.0</td>\n",
              "      <td>509398589.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>Population, total</td>\n",
              "      <td>SP.POP.TOTL</td>\n",
              "      <td>5231654.0</td>\n",
              "      <td>5301583.0</td>\n",
              "      <td>5354310.0</td>\n",
              "      <td>5408320.0</td>\n",
              "      <td>5464187.0</td>\n",
              "      <td>5521981.0</td>\n",
              "      <td>...</td>\n",
              "      <td>27160769.0</td>\n",
              "      <td>28157798.0</td>\n",
              "      <td>29183070.0</td>\n",
              "      <td>30234839.0</td>\n",
              "      <td>31297155.0</td>\n",
              "      <td>32375632.0</td>\n",
              "      <td>33451132.0</td>\n",
              "      <td>34532429.0</td>\n",
              "      <td>35635029.0</td>\n",
              "      <td>36749906.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 68 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c91ff1f-1069-4529-89c1-239d03c46654')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5c91ff1f-1069-4529-89c1-239d03c46654 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5c91ff1f-1069-4529-89c1-239d03c46654');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0b579677-9434-48d8-b73a-af5e9f5d4eab\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0b579677-9434-48d8-b73a-af5e9f5d4eab')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0b579677-9434-48d8-b73a-af5e9f5d4eab button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2"
            }
          },
          "metadata": {},
          "execution_count": 110
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2= df2.drop(['Indicator Name','Indicator Code','Country Name','Country Code'], axis =1)\n",
        "df2.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "7XULw8cKiDax",
        "outputId": "3af68636-b567-41e1-9abb-2a2ad5336ce6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          1960         1961         1962         1963         1964  \\\n",
              "0      54922.0      55578.0      56320.0      57002.0      57619.0   \n",
              "1  130072080.0  133534923.0  137171659.0  140945536.0  144904094.0   \n",
              "2    9035043.0    9214083.0    9404406.0    9604487.0    9814318.0   \n",
              "3   97630925.0   99706674.0  101854756.0  104089175.0  106388440.0   \n",
              "4    5231654.0    5301583.0    5354310.0    5408320.0    5464187.0   \n",
              "\n",
              "          1965         1966         1967         1968         1969  ...  \\\n",
              "0      58190.0      58694.0      58990.0      59069.0      59052.0  ...   \n",
              "1  149033472.0  153281203.0  157704381.0  162329396.0  167088245.0  ...   \n",
              "2   10036008.0   10266395.0   10505959.0   10756922.0   11017409.0  ...   \n",
              "3  108772632.0  111246953.0  113795019.0  116444636.0  119203521.0  ...   \n",
              "4    5521981.0    5581386.0    5641807.0    5702699.0    5763685.0  ...   \n",
              "\n",
              "          2014         2015         2016         2017         2018  \\\n",
              "0     106807.0     107906.0     108727.0     108735.0     108908.0   \n",
              "1  590968990.0  607123269.0  623369401.0  640058741.0  657801085.0   \n",
              "2   32792523.0   33831764.0   34700612.0   35688935.0   36743039.0   \n",
              "3  406992047.0  418127845.0  429454743.0  440882906.0  452195915.0   \n",
              "4   27160769.0   28157798.0   29183070.0   30234839.0   31297155.0   \n",
              "\n",
              "          2019         2020         2021         2022         2023  \n",
              "0     109203.0     108587.0     107700.0     107310.0     107359.0  \n",
              "1  675950189.0  694446100.0  713090928.0  731821393.0  750503764.0  \n",
              "2   37856121.0   39068979.0   40000412.0   40578842.0   41454761.0  \n",
              "3  463365429.0  474569351.0  485920997.0  497387180.0  509398589.0  \n",
              "4   32375632.0   33451132.0   34532429.0   35635029.0   36749906.0  \n",
              "\n",
              "[5 rows x 64 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f8967908-8e0e-4f68-838a-92f40cc8c9d0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>1960</th>\n",
              "      <th>1961</th>\n",
              "      <th>1962</th>\n",
              "      <th>1963</th>\n",
              "      <th>1964</th>\n",
              "      <th>1965</th>\n",
              "      <th>1966</th>\n",
              "      <th>1967</th>\n",
              "      <th>1968</th>\n",
              "      <th>1969</th>\n",
              "      <th>...</th>\n",
              "      <th>2014</th>\n",
              "      <th>2015</th>\n",
              "      <th>2016</th>\n",
              "      <th>2017</th>\n",
              "      <th>2018</th>\n",
              "      <th>2019</th>\n",
              "      <th>2020</th>\n",
              "      <th>2021</th>\n",
              "      <th>2022</th>\n",
              "      <th>2023</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>54922.0</td>\n",
              "      <td>55578.0</td>\n",
              "      <td>56320.0</td>\n",
              "      <td>57002.0</td>\n",
              "      <td>57619.0</td>\n",
              "      <td>58190.0</td>\n",
              "      <td>58694.0</td>\n",
              "      <td>58990.0</td>\n",
              "      <td>59069.0</td>\n",
              "      <td>59052.0</td>\n",
              "      <td>...</td>\n",
              "      <td>106807.0</td>\n",
              "      <td>107906.0</td>\n",
              "      <td>108727.0</td>\n",
              "      <td>108735.0</td>\n",
              "      <td>108908.0</td>\n",
              "      <td>109203.0</td>\n",
              "      <td>108587.0</td>\n",
              "      <td>107700.0</td>\n",
              "      <td>107310.0</td>\n",
              "      <td>107359.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>130072080.0</td>\n",
              "      <td>133534923.0</td>\n",
              "      <td>137171659.0</td>\n",
              "      <td>140945536.0</td>\n",
              "      <td>144904094.0</td>\n",
              "      <td>149033472.0</td>\n",
              "      <td>153281203.0</td>\n",
              "      <td>157704381.0</td>\n",
              "      <td>162329396.0</td>\n",
              "      <td>167088245.0</td>\n",
              "      <td>...</td>\n",
              "      <td>590968990.0</td>\n",
              "      <td>607123269.0</td>\n",
              "      <td>623369401.0</td>\n",
              "      <td>640058741.0</td>\n",
              "      <td>657801085.0</td>\n",
              "      <td>675950189.0</td>\n",
              "      <td>694446100.0</td>\n",
              "      <td>713090928.0</td>\n",
              "      <td>731821393.0</td>\n",
              "      <td>750503764.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>9035043.0</td>\n",
              "      <td>9214083.0</td>\n",
              "      <td>9404406.0</td>\n",
              "      <td>9604487.0</td>\n",
              "      <td>9814318.0</td>\n",
              "      <td>10036008.0</td>\n",
              "      <td>10266395.0</td>\n",
              "      <td>10505959.0</td>\n",
              "      <td>10756922.0</td>\n",
              "      <td>11017409.0</td>\n",
              "      <td>...</td>\n",
              "      <td>32792523.0</td>\n",
              "      <td>33831764.0</td>\n",
              "      <td>34700612.0</td>\n",
              "      <td>35688935.0</td>\n",
              "      <td>36743039.0</td>\n",
              "      <td>37856121.0</td>\n",
              "      <td>39068979.0</td>\n",
              "      <td>40000412.0</td>\n",
              "      <td>40578842.0</td>\n",
              "      <td>41454761.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>97630925.0</td>\n",
              "      <td>99706674.0</td>\n",
              "      <td>101854756.0</td>\n",
              "      <td>104089175.0</td>\n",
              "      <td>106388440.0</td>\n",
              "      <td>108772632.0</td>\n",
              "      <td>111246953.0</td>\n",
              "      <td>113795019.0</td>\n",
              "      <td>116444636.0</td>\n",
              "      <td>119203521.0</td>\n",
              "      <td>...</td>\n",
              "      <td>406992047.0</td>\n",
              "      <td>418127845.0</td>\n",
              "      <td>429454743.0</td>\n",
              "      <td>440882906.0</td>\n",
              "      <td>452195915.0</td>\n",
              "      <td>463365429.0</td>\n",
              "      <td>474569351.0</td>\n",
              "      <td>485920997.0</td>\n",
              "      <td>497387180.0</td>\n",
              "      <td>509398589.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5231654.0</td>\n",
              "      <td>5301583.0</td>\n",
              "      <td>5354310.0</td>\n",
              "      <td>5408320.0</td>\n",
              "      <td>5464187.0</td>\n",
              "      <td>5521981.0</td>\n",
              "      <td>5581386.0</td>\n",
              "      <td>5641807.0</td>\n",
              "      <td>5702699.0</td>\n",
              "      <td>5763685.0</td>\n",
              "      <td>...</td>\n",
              "      <td>27160769.0</td>\n",
              "      <td>28157798.0</td>\n",
              "      <td>29183070.0</td>\n",
              "      <td>30234839.0</td>\n",
              "      <td>31297155.0</td>\n",
              "      <td>32375632.0</td>\n",
              "      <td>33451132.0</td>\n",
              "      <td>34532429.0</td>\n",
              "      <td>35635029.0</td>\n",
              "      <td>36749906.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 64 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8967908-8e0e-4f68-838a-92f40cc8c9d0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f8967908-8e0e-4f68-838a-92f40cc8c9d0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f8967908-8e0e-4f68-838a-92f40cc8c9d0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f57bd8fd-97df-4434-8983-5b8655b18cc1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f57bd8fd-97df-4434-8983-5b8655b18cc1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f57bd8fd-97df-4434-8983-5b8655b18cc1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2"
            }
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "column_sum = df2[0:].sum(axis=0)\n",
        "column_sum"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "id": "kFfQiPbvj75Z",
        "outputId": "98977e38-3d18-4189-b4db-c0f3ac594c86"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1960    3.047833e+10\n",
              "1961    3.090226e+10\n",
              "1962    3.147311e+10\n",
              "1963    3.217845e+10\n",
              "1964    3.289013e+10\n",
              "            ...     \n",
              "2019    8.363634e+10\n",
              "2020    8.458916e+10\n",
              "2021    8.542418e+10\n",
              "2022    8.626396e+10\n",
              "2023    8.712920e+10\n",
              "Length: 64, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1960</th>\n",
              "      <td>3.047833e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1961</th>\n",
              "      <td>3.090226e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1962</th>\n",
              "      <td>3.147311e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1963</th>\n",
              "      <td>3.217845e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1964</th>\n",
              "      <td>3.289013e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019</th>\n",
              "      <td>8.363634e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020</th>\n",
              "      <td>8.458916e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021</th>\n",
              "      <td>8.542418e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022</th>\n",
              "      <td>8.626396e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023</th>\n",
              "      <td>8.712920e+10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>64 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(column_sum, color=plt.cm.Accent(1))\n",
        "plt.tight_layout()\n",
        "plt.title(\"Population Ditribution\")\n",
        "plt.xlabel(\"Population\")\n",
        "plt.ylabel(\"No. of Countries\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 527
        },
        "id": "nuEV3TRgkAh8",
        "outputId": "4c7958aa-7c31-4f93-b2db-055e30c1a07d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(55.847222222222214, 0.5, 'No. of Countries')"
            ]
          },
          "metadata": {},
          "execution_count": 125
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAokAAAHtCAYAAAB1WuTwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA0MUlEQVR4nO3deXhN58L+8XtnJzEkQoxFzElDS4hy1Dy3KK2hqrhMpaqlVGmN57ymNsaWkziKGlo0qkhaVAdUq0qb6hCK1msecoqYkph39u8Pr/0TD5UdO1lp8v1cl6uy9trPutdKat9Zo83pdDoFAAAA3MLL6gAAAADIfiiJAAAAMFASAQAAYKAkAgAAwEBJBAAAgIGSCAAAAAMlEQAAAAZKIgAAAAyURAAAABgoiQCyrR49eqhHjx4eHTMyMlKhoaEeHTOzHDt2TKGhoVq9erXHxxk5cqTCw8PvN2K6hYaGKjIyMsuWB+D+eVsdAIA1Vq9erVGjRrm+9vX1ValSpVS/fn299NJLKlq0qIXp7s+lS5f07rvv6h//+Ifq1KljdRyXW8up3W6Xv7+/goKCVLNmTT377LMKDg6+5xhff/214uPj9fLLL2dm1AzJztkAuI+SCORygwcPVlBQkK5evaodO3YoOjpaX3/9tdauXat8+fJZHS9DLl26pKioKA0aNMgoiS+++KL69+9vUTKpfv36euqpp+R0OpWcnKy9e/cqNjZW0dHRGj58uPr06eOat3Tp0oqPj5e39///p/rrr7/WsmXL3CpidxonM/xVtvj4eNnt9kxdPgDPoiQCuVyjRo1UrVo1SVLnzp1VqFAhLVq0SBs3blTbtm0tTud53t7emV6W/kr58uX11FNPpZk2bNgwvfjii5o8ebIqVqyoxo0bS5JsNpvy5MmT4WVdv35dqamp8vX1va9xPMHq5QNwH+ckAkjj0UcflXTjPDbpRtGYPXu2WrRooapVq6pZs2Z66623dPXq1TTva9asmV544QV9++23euqpp1StWjW1adNGX3zxRZr57nZO4OrVqxUaGupa7p1cvXpVs2bNUseOHfXII4+oRo0a6tatm7Zv3+6a59ixY6pbt64kKSoqSqGhoWnOh7vT8t1dxx9//FFPP/20qlWrpubNmys2NvavNuk9BQYG6q233pK3t7fmzJmTZl1uPZdw5MiRWrZsmSS51uvmutycd8GCBVq8eLFatGihatWqaf/+/X95buPRo0fVt29f1ahRQw0aNFBUVJScTqfr9e+//16hoaH6/vvv07zPnWw3p91+TuLu3bvVr18/1axZU+Hh4erVq5d++eWXNPPc/LnYsWOHIiIi9Oijj6pGjRoaOHCgzpw549Z2BuAe9iQCSOPIkSOSpEKFCkmSxo4dq5iYGD3++OPq06eP4uPjNXfuXO3fv1+zZ89O895Dhw5p6NChevbZZ9WhQwetWrVKQ4YM0bvvvqv69evfd7bk5GR99NFHatu2rTp37qyUlBStXLlS/fr100cffaQqVaqocOHCGjdunMaNG6eWLVuqZcuWkvSXF6u4s46HDx/WkCFD9PTTT7vWceTIkXr44YcVEhKS4XUrVaqUateure+//17Jycny9/c35unSpYtOnjyprVu3aurUqXccZ/Xq1bpy5YqeeeYZ+fr6qmDBgkpNTb3jvA6HQ/369VP16tX12muvacuWLYqMjJTD4dCQIUPcyp+ebLfat2+funfvLj8/P/Xr10/e3t768MMP1aNHDy1dulTVq1dPM/+kSZMUEBCgQYMG6fjx43rvvfc0YcIEzZw5062cANKPkgjkcsnJyTpz5oyuXr2qn376SbNnz1bevHnVtGlT7d27VzExMercubMmTZokSerevbsKFy6shQsXavv27a49j9KNkhgZGanHHntMkvT000+rVatWmj59ukdKYsGCBbVp0yb5+vq6pj3zzDNq3bq1lixZojfffFP58+fX448/rnHjxik0NNQ4tHs7d9fx4MGDWrZsmWrVqiVJat26tRo3bqzVq1drxIgR97V+ISEh2rZtm44dO6bKlSsbr4eHh6t8+fLaunXrXdfrv//9r7788ksVLlzYNe1ue2evXLmihg0bauzYsZKkbt26acCAAZo/f7569OiRZox7SU+2W82cOVPXrl1TdHS0ypQpI0lq3769WrVqpWnTpmnp0qVp5i9UqJAWLlwom80mSUpNTdWSJUuUlJSkAgUKpDsngPTjcDOQy/Xu3Vt169ZV48aNNXToUPn5+SkqKkolSpTQ119/LUlpLqaQpOeee06SXK/fVLx4cdeeO0ny9/dX+/bttXv3bp06deq+s9rtdldBTE1N1blz53T9+nVVrVpVu3fvztCY7q5jcHCwqyBKUuHChVWhQgUdPXo0Q8u/Vf78+SVJ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kczIAwAAgGzA7fskBgQEqFChQpkQBQAAANmF2yVxyJAhmjVrli5dupQZeQAAAJANuH24edGiRTpy5Ijq1aunoKAgeXunHSImJsZj4QAAAGANt0tiixYtMiMHAAAAshG3S+KgQYMyIwcAAACyEbfPSQQAAEDO5/aexMqVK//lvRH37NlzX4EAAABgPbdLYlRUVJqvr1+/rj179igmJkYvv/yyx4IBAID7Z7dn74OG7ubL7uuTk3jkwpVWrVopODhYn376qTp37uyRYAAAION883jL6XQqICCf1VH+UmCgn9URcBdul8S7qVGjhv71r395ajgAAHAfvH28ZLPZtDvumFKSrlgdx2OKlPBXxYdLWB0jV/BISbx8+bLef/99FS9e3BPDAQAAD0lJuqLk85etjuEx+f19rY6Qa7hdEmvXrp3mwhWn06mUlBTlzZtX06ZN82g4AAAAWMPtkjh69Og0X9tsNhUuXFjVq1dXwYIFPRYMAAAA1nG7JHbo0CEzcgAAACAbydA5iRcuXNDKlSu1f/9+SVJISIg6deqkAgUKeDQcAAAArOH2zYZ27typli1bavHixTp//rzOnz+vRYsWqUWLFvrtt98yIyMAAACymNt7EiMiItSsWTNNnDhR3t433n79+nWNHTtWb775ppYtW+bxkAAAAMhabu9J3LVrl/r16+cqiJLk7e2tfv36adeuXR4NBwAAAGu4XRL9/f2VkJBgTE9ISJCfH3dNBwAAyAncLolt2rTRmDFj9OmnnyohIUEJCQlat26dxo4dqyeeeCIzMgIAACCLuX1O4uuvv+76r8PhuDGIt7e6du2q4cOHezYdAAAALOF2SfT19dXYsWM1bNgwHTlyRJJUtmxZ5cuXvR8gDgAAgPRL9+Fmh8OhvXv36vLlG89/zJcvn0JDQxUaGiqbzaa9e/cqNTU104ICAAAg66S7JH788ccaPXq0fHx8jNe8vb01evRorVmzxqPhAAAAYI10l8SVK1eqb9++stvtxms3b4GzYsUKj4YDAACANdJdEg8ePKjq1avf9fVq1aq5HtMHAACAv7d0l8RLly4pOTn5rq+npKS4zlcEAADA31u6S2K5cuX0888/3/X1HTt2qFy5ch4JBQAAAGuluyS2bdtWM2fO1N69e43X9u7dq3//+99q27atR8MBAADAGum+T2Lv3r31zTffqFOnTqpb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Vq1aZXU0AACAXMvbyoVfvXpVv/32m1544QXXNC8vL9WrV08///xzusfx8pKcTs/lstnuPm6BgnnlZbd5bmEWy18gjyTW6+8gJ66TxHr93eTE9cqJ6ySxXn83fv55XH/3yuRdeLZ0bjab0+nJeuWeP//8U40aNdLy5csVHh7umj516lTFxcXpo48+sioaAABArmb54WYAAABkP5aWxMDAQNntduMilcTERBUtWtSiVAAAALC0JPr6+urhhx/Wtm3bXNNSU1O1bdu2NIefAQAAkLUsvXBFkvr06aMRI0aoatWqCgsL03vvvadLly6pY8eOVkcDAADItSwviW3atNGZM2f073//W6dOnVKVKlX07rvvcrgZAADAQpZe3QwAAIDsiaubAQAAYKAkAgAAwEBJBAAAgIGSCAAAAAMl8RYffPCB2rVrp5o1a6pmzZrq0qWLvv76a6tj5Urz5s1TaGio3njjDauj5HiRkZEKDQ1N86dVq1ZWx8o1/vzzTw0fPlx16tRRWFiY2rVrp507d1odK8dr1qyZ8XMfGhqq8ePHWx0tx3M4HJo5c6aaNWumsLAwtWjRQrNnzxbX0WY/lt8CJzt54IEHNHz4cJUrV05Op1OxsbEaOHCgYmJiFBISYnW8XCM+Pl7Lly9XaGio1VFyjZCQEC1atMj1td1utzBN7nH+/Hl17dpVderU0fz58xUYGKjDhw+rYMGCVkfL8VauXCmHw+H6et++ferTpw+/IGWB+fPnKzo6WlOmTFFwcLB27dqlUaNGqUCBAurZs6fV8XALSuItmjVrlubroUOHKjo6Wr/88gslMYukpKTotdde06RJkzRnzhyr4+QadrtdxYoVszpGrjN//nw98MADioiIcE0rU6aMhYlyj8KFC6f5et68eSpbtqz+8Y9/WJQo9/j555/VvHlzNWnSRJIUFBSkdevWKT4+3tpgMHC4+S4cDofWrVunixcv8ojALDRhwgQ1btxY9erVszpKrnL48GE1aNBAzZs317Bhw3TixAmrI+UKmzZtUtWqVTV48GDVrVtX7du314oVK6yOletcvXpVn3zyiTp16iSbzWZ1nBwvPDxc27dv18GDByVJe/fu1Y4dO9SoUSOLk+F27Em8ze+//65nn31WV65cUf78+TV79mwFBwdbHStXWLdunXbv3q2VK1daHSVXCQsLU0REhCpUqKBT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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}